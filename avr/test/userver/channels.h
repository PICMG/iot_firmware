//    channels.h
//
//    This header file decleres functions related to the interface
//    channels.
//    This code is intended to be used as part of the PICMG reference code 
//    for IoT.
//    
//    More information on the PICMG IoT data model can be found within
//    the PICMG family of IoT specifications.  For more information,
//    please visit the PICMG web site (www.picmg.org)
//
//    Copyright (C) 2021,  PICMG
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
#pragma once
#include "config.h"

//===================================================================
// Macro definitions
// Much of the code is autogenerated by macro switches.  The following
// macros help simplify the process

// macro to declare digital input functions for the named digital input
// channel.
#define DECLARE_DIGITAL_IN_CHANNEL_FUNCTS(channelname) \
    void channelname ## _sample(); \
    void channelname ## _init(); \
    unsigned char channelname ## _getRawData();

// macro to declare digital output functions for the named digital
// output channel.
#define DECLARE_DIGITAL_OUT_CHANNEL_FUNCTS(channelname) \
    void channelname ## _init(); \
    void channelname ## _setOutput(unsigned char output); \
    void channelname ## _enable(); \
    void channelname ## _disable();

//===================================================================
// Function Declarations
void channels_init();

// declarations for digital input channels
DECLARE_DIGITAL_IN_CHANNEL_FUNCTS(interlock_in)
DECLARE_DIGITAL_IN_CHANNEL_FUNCTS(trigger_in)
#ifdef CHANNEL_DIGITAL_IN1
    DECLARE_DIGITAL_IN_CHANNEL_FUNCTS(digital_in1)
#endif
#ifdef CHANNEL_DIGITAL_IN2
    DECLARE_DIGITAL_IN_CHANNEL_FUNCTS(digital_in2)
#endif
#ifdef CHANNEL_DIGITAL_IN3
    DECLARE_DIGITAL_IN_CHANNEL_FUNCTS(digital_in3)
#endif
#ifdef CHANNEL_DIGITAL_IN4
    DECLARE_DIGITAL_IN_CHANNEL_FUNCTS(digital_in4)
#endif
#ifdef CHANNEL_DIGITAL_IN5
    DECLARE_DIGITAL_IN_CHANNEL_FUNCTS(digital_in5)
#endif

// declarations for digital output channels
DECLARE_DIGITAL_OUT_CHANNEL_FUNCTS(interlock_out)
DECLARE_DIGITAL_OUT_CHANNEL_FUNCTS(trigger_out)
#ifdef CHANNEL_DIGITAL_OUT1
    DECLARE_DIGITAL_OUT_CHANNEL_FUNCTS(digital_out1)
#endif
#ifdef CHANNEL_DIGITAL_OUT2
    DECLARE_DIGITAL_OUT_CHANNEL_FUNCTS(digital_out2)
#endif
#ifdef CHANNEL_DIGITAL_OUT3
    DECLARE_DIGITAL_OUT_CHANNEL_FUNCTS(digital_out3)
#endif
#ifdef CHANNEL_DIGITAL_OUT4
    DECLARE_DIGITAL_OUT_CHANNEL_FUNCTS(digital_out4)
#endif
#ifdef CHANNEL_DIGITAL_OUT5
    DECLARE_DIGITAL_OUT_CHANNEL_FUNCTS(digital_out5)
#endif
